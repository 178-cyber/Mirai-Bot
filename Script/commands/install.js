const axios = require("axios");
const fs = require("fs");
const path = require("path");
const vm = require("vm");

module.exports.config = {
  name: "install",
  version: "1.1.0",
  hasPermission: 2,
  credits: "Optimized by Aminul Sordar",
  usePrefix: true,
  description: "Create a new JS file from raw code or URL",
  commandCategory: "utility",
  usages: "[fileName.js] [link/code]",
  cooldowns: 5
};

module.exports.run = async ({ message, args, api, event }) => {
  const fileName = args[0];
  const contentInput = args.slice(1).join(" ");

  // ‚úÖ Basic validation
  if (!fileName || !contentInput) {
    return api.sendMessage(
      "‚ö†Ô∏è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß .js ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ ‡¶ì ‡¶ï‡ßã‡¶° / ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®!\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\ncreate test.js console.log('Hello')\n‡¶Ö‡¶•‡¶¨‡¶æ\ncreate test.js https://pastebin.com/raw/abc123",
      event.threadID,
      event.messageID
    );
  }

  if (fileName.includes("..") || path.isAbsolute(fileName)) {
    return api.sendMessage(
      "‚ùå ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶®‡¶Ø‡¶º!",
      event.threadID,
      event.messageID
    );
  }

  if (!fileName.endsWith(".js")) {
    return api.sendMessage(
      "‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ .js ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶®‡¶∂‡¶® ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø!",
      event.threadID,
      event.messageID
    );
  }

  // üß† Determine if it's a URL or raw code
  const isURL = /^https?:\/\/[^ "]+$/.test(contentInput);
  let code;

  if (isURL) {
    if (
      !contentInput.startsWith("https://pastebin.com/raw/") &&
      !contentInput.startsWith("https://raw.githubusercontent.com/")
    ) {
      return api.sendMessage(
        "‚ö†Ô∏è ‡¶∂‡ßÅ‡¶ß‡ßÅ Pastebin ‡¶¨‡¶æ GitHub Raw ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø!",
        event.threadID,
        event.messageID
      );
    }

    try {
      const res = await axios.get(contentInput);
      code = res.data;
    } catch (err) {
      return api.sendMessage(
        `‚ùå ‡¶ï‡ßã‡¶° ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:\n${err.message}`,
        event.threadID,
        event.messageID
      );
    }
  } else {
    code = contentInput;
  }

  // ‚úÖ Validate JS syntax
  try {
    new vm.Script(code);
  } catch (err) {
    return api.sendMessage(
      `‚ùå ‡¶ï‡ßã‡¶° ‡¶∏‡¶ø‡¶®‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏ ‡¶≠‡ßÅ‡¶≤:\n${err.message}`,
      event.threadID,
      event.messageID
    );
  }

  // ‚úÖ Write file
  const filePath = path.join(__dirname, fileName);

  if (fs.existsSync(filePath)) {
    return api.sendMessage(
      `‚ö†Ô∏è ${fileName} ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶®!`,
      event.threadID,
      event.messageID
    );
  }

  try {
    fs.writeFileSync(filePath, code, "utf-8");
    api.sendMessage(
      `‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá:\nüìÅ ${filePath}`,
      event.threadID,
      event.messageID
    );
  } catch (err) {
    console.error("File write error:", err);
    api.sendMessage(
      `‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•:\n${err.message}`,
      event.threadID,
      event.messageID
    );
  }
};
